using AspDotNet6;
using AspDotNet6.Service;
using Microsoft.AspNetCore.Builder;

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.MapGet("/", () => "Hello World!");

var summaries = new[]
{
    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
};

var locations = new []
{
    "Hanoi", "Washington", "Sydney"
};

var autoGeneratedWeathers = () => {
    return Enumerable.Range(1, 5).Select(index => new WeatherForecast
    {
        Date = DateTime.Now.AddDays(index),
        TemperatureC = Random.Shared.Next(-20, 55),
        Summary = summaries[Random.Shared.Next(summaries.Length)]
    })
    .ToArray();
}; 

app.MapGet("/weatherforecast", () =>
{
    return autoGeneratedWeathers();
});

app.MapGet("/weatherforecast/locations/{location}", (string location) =>
{
    foreach(var item in locations)
    {
        if (location.Equals(location))
        {
            return autoGeneratedWeathers();
        }
    }
    return null;
});

app.MapPost("/weatherforecast/locations", (Coordinate coordinate) => {
    if (coordinate.x == 1 && coordinate.y == 1)
        {
            return autoGeneratedWeathers();
        }
        return null;
});

app.MapDelete("/weatherforecast/locations/{id}", (int id) => {
    if (id == 1) 
    {
        return Results.Ok(); 
    }
    return Results.BadRequest();
});

app.MapGet("/locations/{id}", (int id, IDemoService service) =>
{
    try
    {
        return service.GetLocationById(id);
    }catch(Exception) 
    {
        return null;
    }
});

// app.MapGet("/locations/{location}/coordinate", (string location) =>
// {
//     return new Coordinate() 
//     {
//         X = 1, Y = 1,
//     };
// }).RequireAuthorization("Admin");

app.MapGet("/locations/{location}/coordinate", (string location) =>
{
    return new Coordinate() 
    {
        X = 1, Y = 1,
    };
}).AllowAnonymous();



app.Run();
